"""
Script that extracts the data obtained from the RYS8833 module log and save it as an excel file.
"""
import os
import re
import logging
import traceback
import datetime
import pandas as pd
import src.log4me
import src.utils

script_name = os.path.basename(__file__).removesuffix(".py")

def open_NMEA_file(file_path: str) -> list:
    """
    Open the log file containing the NMEA sentences and store them as lists inside a single list.

    Args:
        file_path (str): path to the log file containing the NMEA sentences.

    Returns:
        list: list containing lists  with all the NMEA sentences of the log file.
    """
    data = []

    with open(file_path, 'r') as file:
        for line in file:
            data.append(line)

    return data

def NMEA_sentence_filter(NMEA_type: str ,sentences_list: list, filter_list: list) -> list[str]:
    """
    Filters a list containing all NMEA sentences generated by the RYS8833 module.

    Args:
        NMEA_type (str): The type of NMEA sentence to be filtered.

        sentences_list (list): List containing all  NMEA sentences generated by the RYS8833 module.

        filter_list (list): List containing all NMEA sentence filtered by type.

    Returns:
        list[str]: List containing all NMEA sentences  of a specific type generated by the
        RYS8833 module
    """

    for i in range(len(sentences_list)):
        if sentences_list[i][3:6] == NMEA_type:
            filter_list.append(sentences_list[i])

    return filter_list

def get_NMEA_type_attributes(NMEA_type: str) -> list[str]:
    """
    Get the attributes of a specific NMEA sentence type as list to be used as headers for this
    NMEA type dataframe object.

    Args:
        NMEA_type (str): NMEA sentence type whose attributes are gone be fetched.

    Returns:
        list[str]: List containing all attributes of a specific NMEA sentence type.
    """
    NMEA_type_attributes = getattr(src.utils, NMEA_type + "_header")
    return NMEA_type_attributes()

def NMEA_comma_splitter(sentence: str) -> str:
    """
    Split a NMEA sentence string by commas, but ignore exceptions characters listed in
    exceptions_string.

    Args:
        sentence (str): NMEA sentence string to be splited by comma.

    Returns:
        str: NMEA sentence string split by comma with exceptions ignored.
    """
    return re.split(r',(?![KMNT])', sentence)

def get_Satellite_System_ID(df_NMEA_type: pd.DataFrame) -> pd.DataFrame:
    """
    Get the satellite system ID from the System ID column to easily identify the
    satellite constellations.

    Args:
        df_NMEA_type (pd.DataFrames): Pandas DataFrame object of a specific NMEA sentence type.

    Returns:
        pd.DataFrame: Pandas DataFrame object of a specific NMEA sentence type.
    """
    df_NMEA_type["Satellite_System_ID"] = df_NMEA_type["Sentence_ID"].str[1:3]
    return df_NMEA_type

def manipulate_UTC_of_Position(df_NMEA_type: pd.DataFrame, GMT: int) -> pd.DataFrame:
    """
    Transform the UTC of the position information into the HH:MM:SS format for both UTC
    and local time.

    Args:
        df_NMEA_type (pd.DataFrame): Pandas DataFrame object of a specific NMEA sentence type.

        GMT (int): Greenwich Mean Time (GMT) as an signed integer.

    Returns:
        pd.DataFrame: Pandas DataFrame object of a specific NMEA sentence type.
    """
    if "UTC_of_Position" in df_NMEA_type.columns:
        UTC_of_Position_list = df_NMEA_type["UTC_of_Position"].astype(str).to_list()

        UTC_of_Position_list = \
            [x.split(".")[0] for x in UTC_of_Position_list]
        UTC_of_Position_list = \
            [x[0:2] + ":" + x[2:4] + ":" + x[4:6] for x in UTC_of_Position_list]
        UTC_of_Position_list = \
            [datetime.datetime.strptime(x, "%H:%M:%S").time() for x in UTC_of_Position_list]
        GMT_of_Position_list = \
            [x.replace(hour=x.hour + GMT) for x in UTC_of_Position_list]

        df_NMEA_type["UTC"] = UTC_of_Position_list
        df_NMEA_type["GMT"] = GMT_of_Position_list

        return df_NMEA_type

    else:
        return df_NMEA_type

def manipulate_measurement_variables(df_NMEA_type: pd.DataFrame) -> pd.DataFrame:
    """
    Transform the measurements variables, such as Altitude [m], to an easy to read format.

    Args:
        df_NMEA_type (pd.DataFrame): Pandas DataFrame object of a specific NMEA sentence type.

    Returns:
        pd.DataFrame: Pandas DataFrame object of a specific NMEA sentence type.
    """
    columns_to_transform = ["Altitude_[m]",
                            "Speed_Over_Ground_[knot]",
                            "Speed_Over_Ground_[km/h]"]
    for col in columns_to_transform:
        if col in df_NMEA_type.columns:
            df_NMEA_type[col] = df_NMEA_type[col].str.split(",").str[0]
        else:
            continue
    return df_NMEA_type

def NMEA_sentence_to_dataframe(NMEA_type: str,
                               NMEA_type_list: list[str],
                               sheet_name_list: list[str],
                               GMT: int) -> pd.DataFrame:
    """
    Transforms the list of a specified NMEA sentence type into a pandas DataFrame object.

    Args:
        NMEA_type (str): NMEA sentence type whose attributes are gone be fetched.

        NMEA_type_list (list[str]): List of all NMEA sentence types.

        sheet_name_list (list[str]): List of the names of the corresponding excel sheets
        (For each NMEA sentence type the excel sheet should have its name.)

        GMT (int): Greenwich Mean Time (GMT) as an signed integer.

    Returns:
        pd.DataFrame: Pandas DataFrame object of a specific NMEA sentence type.
    """

    # Only generates a dataframe for actual data.
    if len(NMEA_type_list) != 0:
        sheet_name_list.append(NMEA_type)

        # Empty list to store each line of the specific NMEA sentence type as one item
        list_to_frame = []

        # NMEA sentence type attributes to be used as headers for the dataframe of
        # this specific type.
        header_columns = get_NMEA_type_attributes(NMEA_type)

        for i in range(len(NMEA_type_list)):
            item = NMEA_type_list[i]
            list_to_frame.append(NMEA_comma_splitter(item))

        df =  pd.DataFrame(list_to_frame, columns=header_columns)

        df = get_Satellite_System_ID(df)

        manipulate_UTC_of_Position(df, GMT)

        manipulate_measurement_variables(df)

        columns_to_drop = ["Geodial_Separation_[m]",
                            "Age_Of_DGPS_Data",
                            "Checksum",
                            "Course_Over_Ground_Magnetic"]
        for col in columns_to_drop:
            if col in df.columns:
                df.drop(col, axis = 1, inplace = True)
            else:
                continue

        return df

def save_xls(df_list, sheet_list, xls_path) -> None:
    """
    Create an excel file with dataframes specifics to each NMEA sentence type.

    Args:
        df_list (list): The list that has the order each NMEA type was iterated by the
        NMEA_sentence_to_xls() function.

        filename (str): The path and name of the excel file.
    """
    with pd.ExcelWriter(xls_path) as writer:
        for df, sheet in zip(df_list, sheet_list):

            df.to_excel(writer, sheet_name=sheet, startrow=0 , startcol=0)

def NMEA_sentences_to_xls(GMT_timezone: int, data_list: list, file_name: str) -> None:
    """
    Get the list containing all the NMEA sentences stored as single lists and create an excel file
    with dataframes specifics to each NMEA type.

    Args:
        GMT_timezone (int): Greenwich Mean Time (GMT) as an signed integer.

        data_list (list): The list that has as the NMEA sentences stored as single lists.

        filename (str): The name of the excel file.
    """
    #  # Create a logger object for this function.
    log4me = src.log4me.function_logger(script_name=script_name, console_level=logging.INFO)

    # Get list of the NMEA sentences types.
    NMEA_sentences = src.utils.get_NMEA_sentences()

    # Initialize an empty list to store the dataframes of each type of NMEA sentence.
    df_list = []

    # Initialize an empty list to store the names of each excel sheet in the output file.
    sheet_list = []
    try:
        for NMEA_type in NMEA_sentences:

            # Initialize an empty list to store then data from the specific NMEA sentence type.
            NMEA_type_list = []

            NMEA_type_list = NMEA_sentence_filter(NMEA_type=NMEA_type,
                                            sentences_list=data_list,
                                            filter_list=NMEA_type_list)

            # Check if the NMEA sentence type is not empty, if it is skip to the next iteration.
            if len(NMEA_type_list) != 0:
                df = NMEA_sentence_to_dataframe(NMEA_type=NMEA_type,
                                                NMEA_type_list=NMEA_type_list,
                                                sheet_name_list=sheet_list,
                                                GMT=GMT_timezone)
                df_list.append(df)
                log4me.info("The DataFrame for the NMEA type {} was created successfully."
                                   .format(NMEA_type))
            else:
                continue

        save_xls(df_list, sheet_list, file_name)
    except Exception as error:
        log4me.error("An error occurred while creating the DataFrame for the NMEA type {}."
                                     .format(NMEA_type))
        traceback.print_exc()